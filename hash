In the worse case scenario where we have 128 different characters a hash will have to follow a
fairly complicated process.
Before 6
It will store keys and values pairs in a single 'bin' of memory address. Ruby does this to
optimize initialization and look up times for small hashes which tent to be the most widely used
After 7 key is stored ruby will then create expand the total allocated of memory to 11 (whatever bits)
and will start saving only the values in these spots.
Due to the hashing mechanism and the reduce space some collitions (values need to be saved in the same memory
address will happen). Ruby will handle collisions by appending the new collided values at the top of the link
list.
Once the average density of the hash has reached about 5 which happens around this number ruby will expand the slots allocated to 19
which will require and rehashing.

So as a consequence
look up times in hash are not 100% (1) since there is a very possible scenerio where you might need to
go through the list of collided values that are store in the same memory adress
With respect of space hash are not precisely N but a bit more cuz the link lists will require some extra memory
space to store the reference to the next value.
Finally, there are costly operation overheads that occur at the previously mentioned boundaries where
ruby needs to reallocate memory and rehash etc.

"a" => 'hello'
"a" --> 5838 (one way hashing function)
5 % M => index (M depends of the size of the storage)
[, , , 'hello']

Best case scenario
[128 elements]
where all collide into the same bucket (this if ruby wouldn't handle)
[[128 elements]]

37 bins -> 3 to 4 elements in each bean.
It is about N but not quite

is there a difference between the space of linked list a a simple array slot.
Yes because I need to safe extra space to know the pointers


question? Ar buckets in ruby managed by arrays
Ruby uses linked list to store entries in each bin but again what are those bins?
ruby creates 11 bins for a new empty hash
Once the density exceeds 5 ruby will allocate more bins and will rehash

YES it does uses and array of bins.

Drawbacks:
- First optimization downtime after surpasing the 6th element.
- Collition management and bin increase after certain thredholds

How ruby handles collitions.

https://github.com/ruby/ruby/blob/trunk/hash.c
